---
interface Props {
  navItems: Array<{
    label: string;
    href: string;
    subItems?: Array<{
      label: string;
      href: string;
    }>;
  }>;
}

const { navItems } = Astro.props;
---

<div class="md:hidden">
  <button 
    id="mobile-menu-button"
    class="text-white p-2 hover:text-accent"
    aria-label="Toggle menu"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>

  <div 
    id="mobile-menu"
    class="fixed inset-0 bg-primary transform translate-x-full transition-transform duration-300 z-50"
  >
    <!-- Header -->
    <div class="flex justify-between items-center p-4 border-b border-gray-800 bg-secondary">
      <span class="text-xl font-bold text-accent">Menu</span>
      <button 
        id="close-menu"
        class="text-white p-2 hover:text-accent"
        aria-label="Close menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Navigation -->
    <nav class="h-full overflow-y-auto">
      <div class="px-4 py-6 space-y-6">
        {navItems.map(item => (
          <div class="mb-4">
            <a 
              href={item.href}
              class="text-xl font-medium text-white hover:text-accent block py-2"
            >
              {item.label}
            </a>
            
            {item.subItems && (
              <div class="mt-2 pl-4 space-y-2 border-l-2 border-gray-700">
                {item.subItems.map(subItem => (
                  <a 
                    href={subItem.href}
                    class="text-gray-300 hover:text-accent block py-2 text-base"
                  >
                    {subItem.label}
                  </a>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    </nav>
  </div>
</div>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMenuButton = document.getElementById('close-menu');
  const mobileMenu = document.getElementById('mobile-menu');
  const body = document.body;

  function openMenu() {
    mobileMenu?.classList.remove('translate-x-full');
    body.style.overflow = 'hidden';
  }

  function closeMenu() {
    mobileMenu?.classList.add('translate-x-full');
    body.style.overflow = '';
  }

  mobileMenuButton?.addEventListener('click', openMenu);
  closeMenuButton?.addEventListener('click', closeMenu);

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (
      mobileMenu &&
      !mobileMenu.contains(target) &&
      !mobileMenuButton?.contains(target) &&
      !mobileMenu.classList.contains('translate-x-full')
    ) {
      closeMenu();
    }
  });
</script>